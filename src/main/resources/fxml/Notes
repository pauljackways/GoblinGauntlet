        for (int i = 0; i < rocketButtons.size(); i++) {
            int finalI = i; // variables used within lambdas must be final
            rocketButtons.get(i).setOnAction(event -> {
                updateStats(rocketManager.getDefaultRockets().get(finalI));
                selectedRocketIndex = finalI;
                rocketButtons.forEach(button -> {
                    if (button == rocketButtons.get(finalI)) {
                        button.setStyle("-fx-background-color: #b3b3b3; -fx-background-radius: 5;");
                    } else {
                        button.setStyle("");
                    }
                });
            });
        }


 changed ints to floats so that gamechangers can effect (eg: 20% reduction in flow rate) also changed doubles to floats to speed up the program (now that everything is floats)

 the function that passes player from backgroundscreencontroller to the other controllers (loadcolumn) needs to wait for setplayer to run. have added
     public void initialize() {
         if (player != null) {

         }
     }

integration issue with Ben's tower workshop and my infopane, works, but causes error on click non-tower. fix: added try-catch block that catches out of range exception and sets selectable to null. tested and works. Also noticed images weren't resetting null, so put if statement in to set null if image get is null

For the market screen, we need a combined list of things that are buyable, and a combined list of things the player can sell, but they must also be able to be passed as selectable to the info pane. Have created Selectable interface that then gets extended by both a sellable and buyable interface. Therefore, everything buyable or sellable is also selectable

buy and sell list selection by index was difficult to implement, especially because it was hard to keep the list item selected when clicking the buy/sell button. solution was to just pass whatever is selected to either buy or sell, but since there is no difference between a tower being sold and one being bought, how do I know which function to pass it to whilst still keeping the desired single button? have boolean that is set true when one list is selected and false if the other is selected, which would work fine so long as I also set selected to null if the list is defocused, so even if the button does call buy or sell, nothing is bought or sold.

difficulty deciding if rounds is a player object or not. Decided it would be best to have round created without knowledge of the player specifically

when trying to implement executorservice, have realised that I would need to make a different service for each resource a tower can deliver if it can deliver more than one. Instead, can set flow rates the same, eliminate Resource class, simplify code. It is much easier to change the flow rates of resources from EnumResources itself than for each tower individually.

Was originally going to use a queue, but it requires a cellfactory and I didn't understand it (without invoking chatgpt)

talk about structure